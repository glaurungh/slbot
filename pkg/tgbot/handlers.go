package tgbot

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
	"strings"
)

const (
	commandStart    = "start"
	commandAddStore = "add_store"
	commandAddItem  = "add_item"
	commandViewList = "view_list"
)

func (b *Bot) handleMessage(message *tgbotapi.Message) error {
	log.Printf("[%s] %s", message.From.UserName, message.Text)

	chatID := message.Chat.ID
	userID := message.From.ID
	state := b.userStates[int64(userID)]

	switch state {
	case "waiting_for_store_name":
		handleAddStore(b, chatID, userID, message.Text)
	case "waiting_for_item_name":
		handleAddItem(b, chatID, userID, message.Text)
	default:
		b.bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /add_store –∏–ª–∏ /add_item"))
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, message.Text)
	//msg.ReplyToMessageID = message.MessageID

	_, err := b.bot.Send(msg)
	return err

}

func (b *Bot) handleCommand(message *tgbotapi.Message) error {
	log.Printf("[%s] %s", message.From.UserName, message.Text)

	chatID := message.Chat.ID
	userID := message.From.ID

	switch message.Command() {
	case commandStart:
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –æ–Ω–æ?")
		_, err := b.bot.Send(msg)
		return err

	case commandAddStore:
		b.userStates[int64(userID)] = "waiting_for_store_name"
		_, err := b.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:"))
		return err
	case commandAddItem:
		b.userStates[int64(userID)] = "waiting_for_item_name"
		_, err := b.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"))
		return err
	case commandViewList:
		handleViewList(b, chatID)
	default:
		msg := tgbotapi.NewMessage(chatID, "–¢–∞–∫–æ–≥–æ –Ω–µ —É–º–µ—é ü§∑")
		_, err := b.bot.Send(msg)
		return err
	}
	return nil
}

// –ö–∞—Ä—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
var stores = make(map[int]Store)
var shoppingList = make(map[int]ShoppingItem)

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
var storeIDCounter, itemIDCounter int

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
func handleAddStore(b *Bot, chatID int64, userID int, name string) {
	if name == "" {
		b.bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:"))
		return
	}
	storeIDCounter++
	stores[storeIDCounter] = Store{ID: storeIDCounter, Name: name}
	b.userStates[int64(userID)] = "" // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
	b.bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ú–∞–≥–∞–∑–∏–Ω '%s' –¥–æ–±–∞–≤–ª–µ–Ω —Å ID %d.", name, storeIDCounter)))
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
func handleAddItem(b *Bot, chatID int64, userID int, itemName string) {
	if itemName == "" {
		b.bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:"))
		return
	}
	b.userStates[int64(userID)] = "waiting_for_item_quantity"
	b.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	shoppingList[itemIDCounter+1] = ShoppingItem{Name: itemName}
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
func handleViewList(b *Bot, chatID int64) {
	var result strings.Builder

	for _, item := range shoppingList {
		storeName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		for _, store := range stores {
			if store.ID == item.StoreID {
				storeName = store.Name
				break
			}
		}
		result.WriteString(fmt.Sprintf("–¢–æ–≤–∞—Ä: %s, –ú–∞–≥–∞–∑–∏–Ω: %s\n", item.Name, storeName))
	}

	if result.Len() == 0 {
		b.bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç."))
	} else {
		b.bot.Send(tgbotapi.NewMessage(chatID, result.String()))
	}
}
