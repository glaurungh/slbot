package bot

import (
	"context"
	"fmt"
	"github.com/glaurungh/slbot/internal/domain/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
	"strconv"
	"strings"
)

const (
	commandStart    = "start"
	commandAddStore = "add_store"
	commandAddItem  = "add_item"
	commandViewList = "view_list"
)

func (b *Bot) handleMessage(message *tgbotapi.Message) error {
	log.Printf("[%s] %s", message.From.UserName, message.Text)

	chatID := message.Chat.ID
	userID := message.From.ID

	switch b.userState(userID) {
	case "waiting_for_store_name":
		handleAddStore(b, chatID, userID, message.Text)
	case "waiting_for_store_selection":
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω
	case "waiting_for_item_name":
		handleAddItem(b, chatID, userID, message.Text)
	default:
		_, err := b.bot.Send(
			tgbotapi.NewMessage(
				chatID,
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /add_store, /add_item –∏–ª–∏ /view_list",
			),
		)
		return err
	}

	return nil
}

func (b *Bot) handleCommand(message *tgbotapi.Message) error {
	log.Printf("[%s] %s", message.From.UserName, message.Text)

	chatID := message.Chat.ID
	userID := message.From.ID

	switch message.Command() {
	case commandStart:
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –æ–Ω–æ?")
		_, err := b.bot.Send(msg)
		return err
	case commandAddStore:
		b.userStates[int64(userID)] = "waiting_for_store_name"
		_, err := b.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:"))
		return err
	case commandAddItem:
		b.userStates[int64(userID)] = "waiting_for_item_name"
		_, err := b.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"))
		return err
	case commandViewList:
		handleViewList(b, chatID)
	default:
		msg := tgbotapi.NewMessage(chatID, "–¢–∞–∫–æ–≥–æ –Ω–µ —É–º–µ—é ü§∑")
		_, err := b.bot.Send(msg)
		return err
	}
	return nil
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery —Å —É—á–µ—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏—è
func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) error {

	// –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ callback data
	parts := strings.Split(callbackQuery.Data, ":")
	if len(parts) != 2 {
		_, err := b.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuery.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"))
		return err
	}
	action := parts[0]
	data := parts[1]

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
	switch action {
	case "select_store":
		handleSelectStore(b, callbackQuery, data)
	default:
		_, err := b.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuery.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"))
		return err
	}
	return nil
}

// –ö–∞—Ä—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
var shoppingList = make(map[int]models.ShoppingItem)

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
var itemIDCounter int

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
func handleAddStore(b *Bot, chatID int64, userID int, name string) {
	if name == "" {
		b.bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:"))
		return
	}
	newStore := models.Store{Name: name}
	b.storeService.Create(context.Background(), &newStore)
	b.userStates[int64(userID)] = "" // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
	b.bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ú–∞–≥–∞–∑–∏–Ω '%s' –¥–æ–±–∞–≤–ª–µ–Ω.", name)))
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
func handleAddItem(b *Bot, chatID int64, userID int, itemName string) {
	if itemName == "" {
		b.bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:"))
		return
	}
	b.userStates[int64(userID)] = "waiting_for_store_selection"

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
	createStoresInlineKeyboard := func(maxCharsPerRow int) tgbotapi.InlineKeyboardMarkup {
		var rows [][]tgbotapi.InlineKeyboardButton
		var row []tgbotapi.InlineKeyboardButton
		currentRowLength := 0

		stores, _ := b.storeService.GetAll(context.Background())

		for _, store := range stores {
			callbackData := fmt.Sprintf("select_store:%d", store.ID)
			button := tgbotapi.NewInlineKeyboardButtonData(store.Name, callbackData)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ + –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç maxCharsPerRow
			if currentRowLength+len(store.Name) > maxCharsPerRow && len(row) > 0 {
				rows = append(rows, row)
				row = nil
				currentRowLength = 0
			}

			row = append(row, button)
			currentRowLength += len(store.Name) + 1 // –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
		if len(row) > 0 {
			rows = append(rows, row)
		}

		return tgbotapi.NewInlineKeyboardMarkup(rows...)
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º "select_store:<storeID>"
	keyboard := createStoresInlineKeyboard(50)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	shoppingList[itemIDCounter+1] = models.ShoppingItem{Name: itemName}
	itemIDCounter++
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
func handleViewList(b *Bot, chatID int64) {
	var result strings.Builder

	stores, _ := b.storeService.GetAll(context.Background())

	for _, item := range shoppingList {
		storeName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		for _, store := range stores {
			if store.ID == item.StoreID {
				storeName = store.Name
				break
			}
		}
		result.WriteString(fmt.Sprintf("%d, –¢–æ–≤–∞—Ä: %s, –ú–∞–≥–∞–∑–∏–Ω: %s\n", item.ID, item.Name, storeName))
	}

	if result.Len() == 0 {
		result.WriteString("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
	}

	b.bot.Send(tgbotapi.NewMessage(chatID, result.String()))

}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ callback data
func handleSelectStore(b *Bot, callbackQuery *tgbotapi.CallbackQuery, data string) {
	chatID := callbackQuery.Message.Chat.ID
	userID := callbackQuery.From.ID

	storeID, err := strconv.Atoi(data)
	if err != nil {
		b.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuery.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞"))
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	itemName := shoppingList[itemIDCounter].Name

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
	shoppingList[itemIDCounter] = models.ShoppingItem{Name: itemName, StoreID: storeID}

	// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	b.userStates[int64(userID)] = ""
	//delete(userTempData, int64(userID))

	stores, _ := b.storeService.GetAll(context.Background())

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
	storeName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	for _, store := range stores {
		if store.ID == storeID {
			storeName = store.Name
			break
		}
	}
	b.bot.Send(
		tgbotapi.NewMessage(
			chatID,
			fmt.Sprintf("–¢–æ–≤–∞—Ä '%s' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '%s'.", itemName, storeName),
		),
	)

	// –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞"
	b.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuery.ID, "–ú–∞–≥–∞–∑–∏–Ω –≤—ã–±—Ä–∞–Ω"))
}
